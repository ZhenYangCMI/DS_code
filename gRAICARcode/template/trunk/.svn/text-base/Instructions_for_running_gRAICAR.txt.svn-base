====================================
Instructions for running gRAICAR

by Zhi Yang (yangz@psych.ac.cn)
====================================
Note: this version only supports one ICA trial on each subject.

1. Install
To install gRAICAR, simply add the gRAICAR_code directory and its three sub-directories into matlab path.
An example command line: addpath (genpath ('/data0/yangz/gRAICAR_code/'));

2. Run gRAICAR
There are three batch scripts in the gRAICAR_code directory:
batch_1_setup.m
batch_2_computeNMI.m
batch_3_postProc.m

Here are general steps for running gRAICAR:
1) perform ICA on each individual dataset using Melodic. Please make sure the ICA maps are spatially normalized for group analysis (the number of voxels should be the same across all subjects);
2) Please edit the batch_1_setup.m file to make sure the settings of the paths are correct in the batch_1_setup.m; See instructions in the file for details. Please copy the settings of 'rootDir', 'outDir', and 'taskName' to batch_2_computeNMI.m and batch_3_postProc.m.
3) run batch_1_setup.m. 
4) batch_2_computeNMI.m isolates the computation of NMI from other parts, so that parallel computation can be applied. The parallel computation here is simply implemented by tracking a progress file which is automatically setup in batch_1_setup.m. Please open multiple matlab instances and run batch_2_computeNMI.m in every instance. Upon finish one trunk of tasks, the program will search for another trunk until all computations are done.
5) in a single matlab instance, run batch_3_postProc.m to perform the processing on the NMI matrix. 

3. Structure of the results
All the results are saved in the directory specified in the 'outDir' variable in batch_1_setup.m. Suppose the 'taskName' is set to 'task', the file structure under the 'outDir' is like the following:
directories:
  computeFile: stores the NMI matrix in many trunks;
  compMaps: stores the final group-level component maps (NIFTI format) from weighted averaging of IC maps from individual subjects;
files:
  task_configFile.mat: generated by batch_1_setup.m; saves essential profiles for gRAICAR analysis;
  task_result.mat: stores a matlab variable 'obj', which contains all the settings and essential results from gRAICAR
  task_null_interSb_reproMap.mat: stores the null-distribution for examining the reproducibility of the resultant group-level components
  task_aveMap.mat: stores the weighted averaged component maps in 2D matrix format (corresponding to the files in the compMaps directory)
  progress.log: used for tracking the progress of the NMI compuation. can be removed once gRAICAR finishes

The structure of the 'obj' variable
  obj.setup: profiles of gRAICAR analysis
    obj.setup.subNum: number of subjects
    obj.setup.trial: number of ICA trials per subjects
    obj.setup.ICAprefix: the file name of ICA results from Melodic
    obj.setup.subDir: stores directory names of the subjects
    obj.setup.maskNm: name of the group-level mask files
    obj.setup.candidates: empty for this version
    obj.setup.outDir: path of the output directory
    obj.setup.outPrefix: path and prefix of the output files
    obj.setup.cmptPrefix: path of the parent directory storing the NMI compuation results
    obj.setup.step: length of the trunks for parallel computation

  obj.result: results from gRAICAR
    obj.result.trialTab: a table containing number of ICs for each ICA trial of each subject
    obj.result.cmptTab: a table containing information for computing pair-wise NMI
    obj.result.coordTable: a table maping 2D indices to 3D masks
    obj.result.mask: storing the 3D group-level mask
    obj.result.thr: 0 for this version
    obj.result.foundComp: a matrix containing correspondence between the group-level component and the indices of each IC set
    obj.result.foundRepro: reproducibility matrices (containing SNMI))for each group-level component
    obj.result.foundRepro_NMI: reproducibility matrices (containing NMI))for each group-level component
    obj.result.subjLoad: the centrality of each subject (the mean of NMI with all other subjects in the same group-level component, computed from the foundRepro_NMI)
    obj.result.null_subjLoad: stores the the null_max_similarity distribution for each subject. Obtained by randomly assigning ICs from individual subjects to group-level components and collecting the maximum NMI in the reproducibility matrices
    obj.result.beta_rank_subjLoad: percentage of subjects whose subjLoad (centrality) are lower than the 50th percentile of the null_max_similarity distribution. A lower value indicates higher inter-subject consistency for the group-level component
    obj.result.sig_subjLoad: precentile of the subjLoad (centrality) of each subject in the null_max_similarity distribution. This value indicate the significance the contribution of each subject to the group-level components
    



 
